I"¹,<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include&lt;iostream&gt;
</span>
<span class="cp">#include&lt;deque&gt;
</span>
<span class="cp">#include&lt;queue&gt;
</span>
<span class="cp">#include&lt;cctype&gt;
</span>
<span class="cp">#include&lt;cstring&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">c</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">ip</span><span class="p">[</span><span class="mi">1000</span><span class="p">];</span>
<span class="kt">char</span> <span class="n">prog</span><span class="p">[</span><span class="mi">1000</span><span class="p">][</span><span class="mi">10</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">var</span><span class="p">[</span><span class="mi">26</span><span class="p">];</span> 
<span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">m</span><span class="p">,</span><span class="n">Q</span><span class="p">;</span>
<span class="n">deque</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">readyQ</span><span class="p">;</span>
<span class="n">queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">blockQ</span><span class="p">;</span>
<span class="kt">bool</span> <span class="n">locked</span><span class="p">;</span>
<span class="kt">void</span> <span class="nf">run</span><span class="p">(</span><span class="kt">int</span> <span class="n">pid</span><span class="p">){</span>
	<span class="kt">int</span> <span class="n">q</span> <span class="o">=</span> <span class="n">Q</span><span class="p">;</span>
	<span class="k">while</span><span class="p">(</span><span class="n">q</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span>
		<span class="kt">char</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">prog</span><span class="p">[</span><span class="n">ip</span><span class="p">[</span><span class="n">pid</span><span class="p">]];</span>
		<span class="k">switch</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">2</span><span class="p">]){</span>
			<span class="k">case</span> <span class="sc">'='</span><span class="p">:</span>
				<span class="n">var</span><span class="p">[</span><span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="sc">'a'</span><span class="p">]</span> <span class="o">=</span> <span class="n">isdigit</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span> <span class="o">?</span> <span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">-</span><span class="sc">'0'</span><span class="p">)</span><span class="o">*</span><span class="mi">10</span><span class="o">+</span><span class="n">p</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">-</span><span class="sc">'0'</span><span class="o">:</span><span class="n">p</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">-</span><span class="sc">'0'</span><span class="p">;</span>
				<span class="n">q</span> <span class="o">-=</span> <span class="n">c</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
				<span class="k">break</span><span class="p">;</span>
			<span class="k">case</span> <span class="sc">'i'</span><span class="p">:</span>
				<span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">pid</span><span class="o">+</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="s">": "</span><span class="o">&lt;&lt;</span><span class="n">var</span><span class="p">[</span><span class="n">p</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">-</span><span class="sc">'a'</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
				<span class="n">q</span> <span class="o">-=</span> <span class="n">c</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
				<span class="k">break</span><span class="p">;</span>
			<span class="k">case</span> <span class="sc">'c'</span><span class="p">:</span>
				<span class="k">if</span><span class="p">(</span><span class="n">locked</span><span class="p">){</span>
					<span class="n">blockQ</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">pid</span><span class="p">);</span>
					<span class="k">return</span><span class="p">;</span>
				<span class="p">}</span>
				<span class="n">locked</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
				<span class="n">q</span> <span class="o">-=</span> <span class="n">c</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
				<span class="k">break</span><span class="p">;</span>
			<span class="k">case</span> <span class="sc">'l'</span><span class="p">:</span>
				<span class="n">locked</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
				<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">blockQ</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
					<span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">blockQ</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
					<span class="n">blockQ</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
					<span class="n">readyQ</span><span class="p">.</span><span class="n">push_front</span><span class="p">(</span><span class="n">tmp</span><span class="p">);</span>
				<span class="p">}</span>
				<span class="n">q</span> <span class="o">-=</span> <span class="n">c</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
				<span class="k">break</span><span class="p">;</span>
			<span class="k">case</span> <span class="sc">'d'</span><span class="p">:</span>
				<span class="k">return</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="n">ip</span><span class="p">[</span><span class="n">pid</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="n">readyQ</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">pid</span><span class="p">);</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
<span class="c1">//	freopen("data.out","w",stdout); </span>
	<span class="n">string</span> <span class="n">s</span><span class="p">;</span>
	<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">m</span><span class="p">;</span>
	<span class="k">while</span><span class="p">(</span><span class="n">m</span><span class="o">--</span><span class="p">){</span>	
		<span class="n">memset</span><span class="p">(</span><span class="n">var</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">var</span><span class="p">));</span>
		<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
			<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
		<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">Q</span><span class="p">;</span>
		<span class="n">getchar</span><span class="p">();</span>
		<span class="kt">int</span> <span class="n">line</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
			<span class="n">fgets</span><span class="p">(</span><span class="n">prog</span><span class="p">[</span><span class="n">line</span><span class="o">++</span><span class="p">],</span><span class="mi">10</span><span class="p">,</span><span class="n">stdin</span><span class="p">);</span>
			<span class="n">ip</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">line</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
			<span class="k">while</span><span class="p">(</span><span class="n">prog</span><span class="p">[</span><span class="n">line</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'d'</span><span class="p">)</span>		
				<span class="n">fgets</span><span class="p">(</span><span class="n">prog</span><span class="p">[</span><span class="n">line</span><span class="o">++</span><span class="p">],</span> <span class="mi">10</span><span class="p">,</span> <span class="n">stdin</span><span class="p">);</span>
			<span class="n">readyQ</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="n">locked</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
		<span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">readyQ</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
			<span class="kt">int</span> <span class="n">pid</span> <span class="o">=</span> <span class="n">readyQ</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
			<span class="n">readyQ</span><span class="p">.</span><span class="n">pop_front</span><span class="p">();</span>
			<span class="n">run</span><span class="p">(</span><span class="n">pid</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="k">if</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
			<span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span> 
</code></pre></div></div>

:ET